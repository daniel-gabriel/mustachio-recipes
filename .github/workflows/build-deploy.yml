name: Build and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      force-ui-build:
        description: Forces a UI build when checked
        required: false
        default: false
      force-api-build:
        description: Forces an API build when checked
        required: false
        default: false
  push:
    branches:
      - '*'
    tags:
      - v*

jobs:
  build_and_push:
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-latest
    outputs:
      ui-changed: ${{ steps.check-changes.outputs.ui-changed }}
      api-changed: ${{ steps.check-changes.outputs.api-changed }}
      docker-ui-tag: ${{ steps.tags.outputs.uiTag }}
      docker-api-tag: ${{ steps.tags.outputs.apiTag }}
      docker-ui-tag-latest: ${{ steps.tags.outputs.uiTagLatest }}
      docker-api-tag-latest: ${{ steps.tags.outputs.apiTagLatest }}
      ui-version: ${{ steps.gitversion-ui.outputs.fullSemVer }}
      api-version: ${{ steps.gitversion-api.outputs.fullSemVer }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check-changes
        run: |
          if [[ "${{ github.event.inputs.force-ui-build }}" == "true" ]] || ! git diff --quiet HEAD^ HEAD -- ./ui; then
            echo "UI - setting to true"
            echo "ui-changed=true" >> $GITHUB_OUTPUT
          else
            echo "UI - setting to false"
            echo "ui-changed=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ github.event.inputs.force-api-build }}" == "true" ]] || ! git diff --quiet HEAD^ HEAD -- ./api; then
            echo "API - setting to true"
            echo "api-changed=true" >> $GITHUB_OUTPUT
          else
            echo "API - setting to false"
            echo "api-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Install GitVersion
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: "5.x"

      # Version for API
      - name: Run GitVersion for API
        if: ${{ !startsWith(github.ref, 'refs/tags/') && steps.check-changes.outputs.api-changed == 'true' }}
        uses: gittools/actions/gitversion/execute@v0.9.15
        id: gitversion-api
        with:
          useConfigFile: true
          configFilePath: api/GitVersion.yml

#      - name: Make version.txt file for API
#        if: ${{ !startsWith(github.ref, 'refs/tags/') && steps.check-changes.outputs.api-changed == 'true' }}
#        run: |
#          echo -n "${{ steps.gitversion-api.outputs.fullSemVer }}" > api/apiVersion.txt

      # Version for UI
      - name: Run GitVersion for UI
        if: ${{ !startsWith(github.ref, 'refs/tags/') && steps.check-changes.outputs.ui-changed == 'true' }}
        uses: gittools/actions/gitversion/execute@v0.9.15
        id: gitversion-ui
        with:
          useConfigFile: true
          configFilePath: ui/GitVersion.yml

#      - name: Make version.txt file for UI
#        if: ${{ !startsWith(github.ref, 'refs/tags/') && steps.check-changes.outputs.ui-changed == 'true' }}
#        run: |
#          echo -n "${{ steps.gitversion-ui.outputs.fullSemVer }}" > ui/uiVersion.txt

      # Upload the version artefacts
      - name: Publish the docker-compose files
        uses: actions/upload-artifact@v3
        with:
          name: Docker
          path: |
            docker-compose.*.yml

      - name: Make docker image tags
        id: tags
        run: |
          echo "apiTag=${{ github.repository }}/api:${{ steps.gitversion-api.outputs.fullSemVer }}" >> $GITHUB_OUTPUT
          echo "uiTag=${{ github.repository }}/ui:${{ steps.gitversion-ui.outputs.fullSemVer }}" >> $GITHUB_OUTPUT
          echo "apiTagLatest=${{ github.repository }}/api:latest" >> $GITHUB_OUTPUT
          echo "uiTagLatest=${{ github.repository }}/ui:latest" >> $GITHUB_OUTPUT

      - name: Build API Docker image
        if: ${{ steps.check-changes.outputs.api-changed == 'true' }}
        run: |
          cd api
          echo "${{ steps.gitversion-api.outputs.fullSemVer }}" > version.txt
          docker build -t ghcr.io/${{ steps.tags.outputs.apiTag }} -t ghcr.io/${{ steps.tags.outputs.apiTagLatest }} .
      - name: Build UI Docker image
        if: ${{ steps.check-changes.outputs.ui-changed == 'true' }}
        run: |
          cd ui
          echo "${{ steps.gitversion-ui.outputs.fullSemVer }}" > version.txt
          docker build -t ghcr.io/${{ steps.tags.outputs.uiTag }} -t ghcr.io/${{ steps.tags.outputs.uiTagLatest }} .

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push API Docker image
        if: ${{ steps.check-changes.outputs.api-changed == 'true' }}
        run: |
          docker push ghcr.io/${{ steps.tags.outputs.apiTag }}
          docker push ghcr.io/${{ steps.tags.outputs.apiTagLatest }}

      - name: Push UI Docker image
        if: ${{ steps.check-changes.outputs.ui-changed == 'true' }}
        run: |
          docker push ghcr.io/${{ steps.tags.outputs.uiTag }}
          docker push ghcr.io/${{ steps.tags.outputs.uiTagLatest }}

  deploy-prod:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      # wait for an approval on the created github issue for up to 3 minutes
      - uses: trstringer/manual-approval@v1
        timeout-minutes: 3
        with:
          secret: ${{ github.TOKEN }}
          approvers: daniel-gabriel
          minimum-approvals: 1
          issue-title: "Deploying ${{ github.ref_name }} to prod from docker image"
          issue-body: "Comment 'approve' on the new issue titled ${{github.ref_name}} to approve release."
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''

      - name: Checkout code for tag checks
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: Docker
          path: docker

      - name: version-helper
        run: |
          echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      # make a release for the UI
      - name: Check if UI tag exists
        id: check-ui-tag
        run: |
          if git ls-remote --tags origin ui-${{ needs.build_and_push.outputs.ui-version }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and push UI tag
        if: ${{ needs.build_and_push.outputs.ui-changed == 'true' && steps.check-ui-tag.exists == 'true' }}
        id: tag-ui-version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ui-${{ needs.build_and_push.outputs.ui-version }}

      - name: Create a UI GitHub release
        if: ${{ needs.build_and_push.outputs.ui-changed == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ui-${{ needs.build_and_push.outputs.ui-version }}
          name: Release ui-${{ needs.build_and_push.outputs.ui-version }}-${{ steps.version-helper.timestamp }}
          body: ${{ steps.tag-ui-version.outputs.changelog }}

      # make a release for the API
      - name: Check if API tag exists
        id: check-api-tag
        run: |
          if git ls-remote --tags origin api-${{ needs.build_and_push.outputs.api-version }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and push API tag
        if: ${{ needs.build_and_push.outputs.api-changed == 'true' && steps.check-api-tag.exists == 'true' }}
        id: tag-api-version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: api-${{ needs.build_and_push.outputs.api-version }}

      - name: Create an API GitHub release
        if: ${{ needs.build_and_push.outputs.api-changed == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          tag: api-${{ needs.build_and_push.outputs.api-version }}
          name: Release api-${{ needs.build_and_push.outputs.api-version }}-${{ steps.version-helper.timestamp }}
          body: ${{ steps.tag-api-version.outputs.changelog }}

      - name: Create .env file for the UI
        env:
          API_BASE_URL: "${{ vars.API_BASE_URL_PROD }}"
          FIREBASE_API_KEY: "${{ vars.FIREBASE_API_KEY_PROD }}"
          FIREBASE_AUTH_DOMAIN: "${{ vars.FIREBASE_AUTH_DOMAIN_PROD }}"
          FIREBASE_PROJECT_ID: "${{ vars.FIREBASE_PROJECT_ID_PROD }}"
          FIREBASE_STORAGE_BUCKET: "${{ vars.FIREBASE_STORAGE_BUCKET_PROD }}"
          FIREBASE_MESSAGING_SENDER_ID: "${{ vars.FIREBASE_MESSAGING_SENDER_ID_PROD }}"
          FIREBASE_APP_ID: "${{ vars.FIREBASE_APP_ID_PROD }}"
        run: |
          envPath="./.env.ui"
          echo "API_BASE_URL=$API_BASE_URL" >> $envPath
          echo "FIREBASE_API_KEY=$FIREBASE_API_KEY" >> $envPath
          echo "FIREBASE_AUTH_DOMAIN=$FIREBASE_AUTH_DOMAIN" >> $envPath
          echo "FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID_PROD" >> $envPath
          echo "FIREBASE_STORAGE_BUCKET=$FIREBASE_STORAGE_BUCKET" >> $envPath
          echo "FIREBASE_MESSAGING_SENDER_ID=$FIREBASE_MESSAGING_SENDER_ID" >> $envPath
          echo "FIREBASE_APP_ID=$FIREBASE_APP_ID_PROD" >> $envPath

      - name: Create .env file for the API
        env:
          MONGO_ADMIN_USERNAME: "${{ secrets.MONGO_ADMIN_USERNAME_PROD }}"
          MONGO_ADMIN_PASSWORD: "${{ secrets.MONGO_ADMIN_PASSWORD_PROD }}"
          MONGO_CONNECTION_STRING: "${{ secrets.MONGO_CONNECTION_STRING_PROD }}"
          NODE_ENV: "production"
          API_PORT: "${{ vars.API_PORT_PROD }}"
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY_PROD }}"
          FIREBASE_PROJECT_ID: "${{ secrets.FIREBASE_PROJECT_ID_PROD }}"
          FIREBASE_PRIVATE_KEY_ID: "${{ secrets.FIREBASE_PRIVATE_KEY_ID_PROD }}"
          FIREBASE_PRIVATE_KEY: "${{ secrets.FIREBASE_PRIVATE_KEY_PROD }}"
          FIREBASE_CLIENT_EMAIL: "${{ secrets.FIREBASE_CLIENT_EMAIL_PROD }}"
          FIREBASE_CLIENT_ID: "${{ secrets.FIREBASE_CLIENT_ID_PROD }}"
          FIREBASE_CLIENT_X509_CERT_URL: "${{ secrets.FIREBASE_CLIENT_X509_CERT_URL_PROD }}"
        run: |
          envPath="./.env.api"
          echo "MONGO_CONNECTION_STRING=$MONGO_CONNECTION_STRING" >> $envPath
          echo "NODE_ENV=$NODE_ENV" >> $envPath
          echo "API_PORT=$API_PORT" >> $envPath
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $envPath
          echo "FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID" >> $envPath
          echo "FIREBASE_PRIVATE_KEY_ID=$FIREBASE_PRIVATE_KEY_ID" >> $envPath
          echo "FIREBASE_PRIVATE_KEY=$FIREBASE_PRIVATE_KEY" >> $envPath
          echo "FIREBASE_CLIENT_EMAIL=$FIREBASE_CLIENT_EMAIL" >> $envPath
          echo "FIREBASE_CLIENT_ID=$FIREBASE_CLIENT_ID" >> $envPath
          echo "FIREBASE_CLIENT_X509_CERT_URL=$FIREBASE_CLIENT_X509_CERT_URL" >> $envPath

      - name: Create .env file for Mongo
        env:
          MONGO_ADMIN_USERNAME: "${{ secrets.MONGO_ADMIN_USERNAME_PROD }}"
          MONGO_ADMIN_PASSWORD: "${{ secrets.MONGO_ADMIN_PASSWORD_PROD }}"
        run: |
          envPath="./.env.mongo"
          echo "MONGO_INITDB_ROOT_USERNAME=$MONGO_ADMIN_USERNAME" >> $envPath
          echo "MONGO_INITDB_ROOT_PASSWORD=$MONGO_ADMIN_PASSWORD" >> $envPath

      - name: Deploy to Digital Ocean
        env:
          DROPLET_PRIVATE_KEY: ${{ secrets.DIGITAL_OCEAN_DROPLET_SSH_PRIVATE_KEY_PROD }}
          DROPLET_ADDRESS: ${{ vars.DIGITAL_OCEAN_DROPLET_IP_PROD }}
          DROPLET_USER: ${{ vars.DIGITAL_OCEAN_DROPLET_USER_PROD }}
          GHCR_USER: ${{ vars.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          echo "$DROPLET_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          
          mkdir ./docker-deploy
          cp ./docker/docker-compose.prod.yml ./docker-deploy/
          cp ./.env.api ./docker-deploy/
          cp ./.env.ui ./docker-deploy/
          cp ./.env.mongo ./docker-deploy/
          
          # copy docker-compose to the droplet
          rsync -avz -e "ssh -i deploy_key -o StrictHostKeyChecking=no" ./docker-deploy/ "$DROPLET_USER@$DROPLET_ADDRESS:/opt/mustachio"
          #scp -i deploy_key -o StrictHostKeyChecking=no ./docker-deploy/* "$DROPLET_USER@$DROPLET_ADDRESS:/opt/mustachio"

          ssh -i deploy_key -o StrictHostKeyChecking=no -o SendEnv=GHCR_TOKEN -o SendEnv=GHCR_USER "$DROPLET_USER@$DROPLET_ADDRESS" <<ENDSSH
            # Log in to GitHub Container Registry
            docker login ghcr.io -u "$GHCR_USER" -p "$GHCR_TOKEN"
            
            # Pull the updated Docker images if they have changed
            if [ "${{ needs.build_and_push.outputs.api-changed }}" == "true" ]; then
              docker pull ghcr.io/${{ needs.build_and_push.outputs.docker-api-tag-latest }}
            fi
            
            if [ "${{ needs.build_and_push.outputs.ui-changed }}" == "true" ]; then
              docker pull ghcr.io/${{ needs.build_and_push.outputs.docker-ui-tag-latest }}
            fi
            
            cd /opt/mustachio
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
          ENDSSH